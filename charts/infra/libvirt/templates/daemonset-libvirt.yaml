{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- define "libvirtProbe" }}
{{- $probeType := . }}
exec:
  command:
    - /tmp/health-probe.sh
    - libvirt
    - {{ $probeType }}
{{- end }}

{{- define "virtlogdProbe" }}
{{- $probeType := . }}
exec:
  command:
    - /tmp/health-probe.sh
    - virtlogd
    - {{ $probeType }}
{{- end }}

{{- define "libvirt.daemonset" }}
{{- $daemonset := index . 0 }}
{{- $configMapName := index . 1 }}
{{- $serviceAccountName := index . 2 }}
{{- $envAll := index . 3 }}
{{- $vnc_tls_enabled := false }}
{{- if eq $envAll.Values.conf.qemu.vnc_tls "1" }}
{{- $vnc_tls_enabled = true }}
{{- end }}
{{- $libvirt_tls_enabled := false }}
{{- if eq $envAll.Values.conf.libvirt.listen_tls "1" }}
{{- $libvirt_tls_enabled = true }}
{{- end }}
{{- with $envAll }}

{{- $mounts_libvirt := .Values.pod.mounts.libvirt.libvirt }}
{{- $mounts_virtlogd := .Values.pod.mounts.libvirt.virtlogd }}
{{- $mounts_libvirt_init := .Values.pod.mounts.libvirt.init_container }}
{{- $security_driver := index .Values.conf.qemu "security_driver" | default "" }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: libvirt
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ tuple $envAll .Chart.Name $daemonset | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 4 }}
spec:
  selector:
    matchLabels:
{{ tuple $envAll .Chart.Name $daemonset | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 6 }}
{{ tuple $envAll $daemonset | include "helm-toolkit.snippets.kubernetes_upgrades_daemonset" | indent 2 }}
  template:
    metadata:
      labels:
{{ tuple $envAll .Chart.Name $daemonset | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
{{- dict "envAll" $envAll "podName" "libvirt-libvirt-default" "containerNames" (list "libvirt") | include "helm-toolkit.snippets.kubernetes_mandatory_access_control_annotation" | indent 8 }}
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-etc-hash: {{ tuple "configmap-etc.yaml" . | include "helm-toolkit.utils.hash" }}
        secret-libvirt-vnc-server-certs-hash: {{ tuple "secret-libvirt-vnc-server-tls.yaml" . | include "helm-toolkit.utils.hash" }}
        {{- if .Values.manifests.secret_libvirt_server_tls }}
        secret-libvirt-server-certs-hash: {{ tuple "secret-libvirt-server-tls.yaml" . | include "helm-toolkit.utils.hash" }}
        {{- end }}
    spec:
{{ dict "envAll" $envAll "application" "libvirt" | include "helm-toolkit.snippets.kubernetes_pod_security_context" | indent 6 }}
      serviceAccountName: {{ $serviceAccountName }}
      nodeSelector:
        {{ .Values.labels.agent.libvirt.node_selector_key }}: {{ .Values.labels.agent.libvirt.node_selector_value }}
      hostNetwork: true
      hostPID: true
      hostIPC: true
      dnsPolicy: {{ .Values.pod.dns_policy }}
      initContainers:
{{ tuple $envAll "pod_dependency" $mounts_libvirt_init | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
{{ dict "envAll" $envAll | include "helm-toolkit.snippets.kubernetes_apparmor_loader_init_container" | indent 8 }}
        - name: libvirt-init-modules
{{ tuple $envAll "libvirt" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ dict "envAll" $envAll "application" "libvirt" "container" "libvirt_init_modules" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          terminationMessagePath: /var/log/termination-log
          command:
            - /tmp/libvirt-init-modules.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: etc-modprobe-d
              mountPath: /etc/modprobe.d_host
            - name: host-rootfs
              mountPath: /mnt/host-rootfs
              mountPropagation: HostToContainer
            {{ if not (eq $security_driver "apparmor") }}
              readOnly: true
            {{ end }}
            - name: libvirt-bin
              mountPath: /tmp/libvirt-init-modules.sh
              subPath: libvirt-init-modules.sh
              readOnly: true
            {{ if eq $security_driver "apparmor" }}
            - name: sys
              mountPath: /sys
            - mountPath: /var/lib/libvirt
              name: var-lib-libvirt
            {{ end }}
        - name: init-dynamic-options
{{ tuple $envAll "libvirt" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ dict "envAll" $envAll "application" "libvirt" "container" "init_dynamic_options" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          terminationMessagePath: /var/log/termination-log
          command:
            - /tmp/init-dynamic-options.sh
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-shared
              mountPath: /tmp/pod-shared
            - name: libvirt-bin
              mountPath: /tmp/init-dynamic-options.sh
              subPath: init-dynamic-options.sh
              readOnly: true
        {{- if $libvirt_tls_enabled }}
        - name: init-tls-certs
{{ tuple $envAll "libvirt" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ dict "envAll" $envAll "application" "libvirt" "container" "tls_certs" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          terminationMessagePath: /var/log/termination-log
          command:
            - /tmp/init-tls-certs.sh
          volumeMounts:
            - mountPath: /tmp
              name: pod-tmp
            - name: libvirt-server-tls-secret
              mountPath: /tmp/cacert.pem
              subPath: ca.crt
              readOnly: true
            - name: libvirt-server-tls-secret
              mountPath: /tmp/cakey.pem
              subPath: ca.key
              readOnly: true
            - name: libvirt-bin
              mountPath: /tmp/init-tls-certs.sh
              subPath: init-tls-certs.sh
              readOnly: true
            - name: pki-libvirt
              mountPath: /etc/pki/libvirt
            - name: pki-ca
              mountPath: /etc/pki/CA
            - name: pki-qemu
              mountPath: {{ .Values.conf.qemu.default_tls_x509_cert_dir }}
        {{ end }}
      containers:
        - name: libvirt
{{ tuple $envAll "libvirt" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.libvirt | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "libvirt" "container" "libvirt" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
{{ dict "envAll" . "component" "libvirt" "container" "libvirt" "type" "readiness" "probeTemplate" (include "libvirtProbe" "readiness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
{{ dict "envAll" . "component" "libvirt" "container" "libvirt" "type" "liveness" "probeTemplate" (include "libvirtProbe" "liveness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
          terminationMessagePath: /var/log/termination-log
          command:
            - /tmp/libvirt.sh
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -c
                  - |-
                    kill $(cat /var/run/libvirtd.pid)
          volumeMounts:
{{ dict "envAll" $envAll "objectType" "mountpoint" "secretPrefix" "libvirt" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 12 }}
            {{- if $vnc_tls_enabled }}
            - name: libvirt-vnc-server-tls-secret
              mountPath: /etc/pki/libvirt-vnc/ca-cert.pem
              subPath: ca.crt
              readOnly: true
            - name: libvirt-vnc-server-tls-secret
              mountPath: /etc/pki/libvirt-vnc/server-cert.pem
              subPath: tls.crt
              readOnly: true
            - name: libvirt-vnc-server-tls-secret
              mountPath: /etc/pki/libvirt-vnc/server-key.pem
              subPath: tls.key
              readOnly: true
            {{ end }}
            {{- if $libvirt_tls_enabled }}
            - name: pki-libvirt
              mountPath: /etc/pki/libvirt
              mountPropagation: HostToContainer
            - name: pki-ca
              mountPath: /etc/pki/CA
              mountPropagation: HostToContainer
            - name: pki-qemu
              mountPath: {{ .Values.conf.qemu.default_tls_x509_cert_dir }}
              mountPropagation: HostToContainer
            {{ end }}
            - name: pod-tmp
              mountPath: /tmp
            - name: libvirt-bin
              mountPath: /tmp/libvirt.sh
              subPath: libvirt.sh
              readOnly: true
            - name: pod-shared
              mountPath: /etc/libvirt/libvirtd.conf
              subPath: libvirtd.conf
              readOnly: true
            - name: libvirt-etc
              mountPath: /etc/libvirt/qemu.conf
              subPath: qemu.conf
              readOnly: true
            - name: etc-libvirt-qemu
              mountPath: /etc/libvirt/qemu
            - name: etc-libvirt-secrets
              mountPath: /etc/libvirt/secrets
            {{ if eq $security_driver "apparmor" }}
            - name: etc-apparmord-libvirt
              mountPath: /etc/apparmor.d/libvirt
            {{- if index $envAll.Values.conf.apparmor.templates "TEMPLATE.qemu" }}
            - name: libvirt-etc
              mountPath: /etc/apparmor.d/libvirt/TEMPLATE.qemu
              subPath: TEMPLATE.qemu
              readOnly: true
            {{ end }}
            - name: sys
              mountPath: /sys
            {{ end }}
            - mountPath: /lib/modules
              name: libmodules
              readOnly: true
            - name: var-lib-libvirt
              mountPath: /var/lib/libvirt
              mountPropagation: Bidirectional
            - name: var-lib-nova
              mountPath: /var/lib/nova
              mountPropagation: Bidirectional
            - name: run
              mountPath: /run
            - name: dev
              mountPath: /dev
              mountPropagation: HostToContainer
            - name: cgroup
              mountPath: /sys/fs/cgroup
            - name: logs
              mountPath: /var/log/libvirt
            - name: machine-id
              mountPath: /etc/machine-id
              readOnly: true
            {{- if .Values.conf.ceph.enabled }}
            - name: ceph-etc
              mountPath: /etc/ceph/ceph.conf
              subPath: ceph.conf
              readOnly: true
            {{- end }}
            - name: libvirt-bin
              mountPath: /tmp/health-probe.sh
              subPath: health-probe.sh
              readOnly: true

{{ if $mounts_libvirt.volumeMounts }}{{ toYaml $mounts_libvirt.volumeMounts | indent 12 }}{{ end }}
        - name: virtlogd
{{ tuple $envAll "libvirt" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.virtlogd | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "libvirt" "container" "virtlogd" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
{{ dict "envAll" . "component" "libvirt" "container" "virtlogd" "type" "readiness" "probeTemplate" (include "virtlogdProbe" "readiness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
{{ dict "envAll" . "component" "libvirt" "container" "virtlogd" "type" "liveness" "probeTemplate" (include "virtlogdProbe" "liveness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
          command:
            - /tmp/virtlogd.sh
          terminationMessagePath: /var/log/termination-log
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -c
                  - |-
                    kill $(cat /var/run/virtlogd.pid)
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: libvirt-bin
              mountPath: /tmp/virtlogd.sh
              subPath: virtlogd.sh
              readOnly: true
            - name: libvirt-etc
              mountPath: /etc/libvirt/virtlogd.conf
              subPath: virtlogd.conf
              readOnly: true
            - name: var-lib-libvirt
              mountPath: /var/lib/libvirt
              mountPropagation: Bidirectional
            - name: var-lib-nova
              mountPath: /var/lib/nova
              mountPropagation: Bidirectional
            - name: run
              mountPath: /run
            - name: dev
              mountPath: /dev
              mountPropagation: HostToContainer
            - name: logs
              mountPath: /var/log/libvirt
            - name: libvirt-bin
              mountPath: /tmp/health-probe.sh
              subPath: health-probe.sh
              readOnly: true
{{ if $mounts_virtlogd.volumeMounts }}{{ toYaml $mounts_virtlogd.volumeMounts | indent 12 }}{{ end }}
      volumes:
        {{ dict "envAll" $envAll "objectType" "volume" "secretPrefix" "libvirt" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 8 }}
        {{ dict "enabled" $vnc_tls_enabled "secretName" $envAll.Values.secrets.tls.libvirt.vnc.vnc_server "name" "libvirt-vnc-server-tls-secret" | include "helm-toolkit.snippets.tls_volume" | indent 8 }}
        {{ dict "enabled" $libvirt_tls_enabled "secretName" $envAll.Values.secrets.tls.libvirt.server.ca_certs "name" "libvirt-server-tls-secret" | include "helm-toolkit.snippets.tls_volume" | indent 8 }}
        - name: pod-tmp
          emptyDir: {}
        - name: pod-shared
          emptyDir: {}
        - name: libvirt-bin
          configMap:
            name: libvirt-bin
            defaultMode: 365
        - name: libvirt-etc
          secret:
            secretName: {{ $configMapName }}
            defaultMode: 292
        {{- if $libvirt_tls_enabled }}
        - name: pki-libvirt
          hostPath:
            path: /etc/pki/libvirt
        - name: pki-ca
          hostPath:
            path: /etc/pki/CA
        - name: pki-qemu
          hostPath:
            path: {{ .Values.conf.qemu.default_tls_x509_cert_dir }}
        {{ end }}
        {{- if .Values.conf.ceph.enabled }}
        - name: ceph-etc
{{- if .Values.manifests.ceph_conf }}
          secret:
            secretName: {{ $configMapName }}
{{- else }}
          configMap:
            name: {{ .Values.ceph_client.configmap }}
{{- end }}
            defaultMode: 292
        {{ end }}
        - name: libmodules
          hostPath:
            path: /lib/modules
        - name: var-lib-libvirt
          hostPath:
            path: /var/lib/libvirt
        - name: var-lib-nova
          hostPath:
            path: /var/lib/nova
        - name: run
          hostPath:
            path: /run
        - name: dev
          hostPath:
            path: /dev
        - name: logs
          hostPath:
            path: /var/log/libvirt
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
        - name: machine-id
          hostPath:
            path: /etc/machine-id
        - name: etc-libvirt-qemu
          hostPath:
            path: /etc/libvirt/qemu
        - name: etc-libvirt-secrets
          hostPath:
            path: /etc/libvirt/secrets
        - name: etc-modprobe-d
          hostPath:
            path: /etc/modprobe.d
        {{ if eq $security_driver "apparmor" }}
        - name: etc-apparmord-libvirt
          hostPath:
            path: /etc/apparmor.d/libvirt
        - name: sys
          hostPath:
            path: /sys
        {{ end }}
        - name: host-rootfs
          hostPath:
            path: /
            type: Directory
{{ dict "envAll" $envAll "component" "libvirt" "requireSys" true | include "helm-toolkit.snippets.kubernetes_apparmor_volumes" | indent 8 }}
{{ if $mounts_libvirt.volumes }}{{ toYaml $mounts_libvirt.volumes | indent 8 }}{{ end }}
{{ if $mounts_virtlogd.volumes }}{{ toYaml $mounts_virtlogd.volumes | indent 8 }}{{ end }}
{{- end }}
{{- end }}

{{- if .Values.manifests.daemonset_libvirt }}

{{- $envAll := . }}
{{- $daemonset := "libvirt" }}
{{- $configMapName := "libvirt-etc" }}
{{- $serviceAccountName := "libvirt" }}

{{- $dependencyOpts := dict "envAll" $envAll "dependencyMixinParam" $envAll.Values.network.backend "dependencyKey" "libvirt" -}}
{{- $_ := include "helm-toolkit.utils.dependency_resolver" $dependencyOpts | toString | fromYaml }}

{{ tuple $envAll "pod_dependency" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
{{- $configmap_yaml := "libvirt.configmap.etc" }}

{{/* Preffer using .Values.overrides rather than .Values.conf.overrides */}}
{{- if index (index .Values "overrides" |default dict ) "libvirt_libvirt" }}
{{- list $daemonset "libvirt.daemonset" $serviceAccountName $configmap_yaml $configMapName "libvirt.configmap.bin" "libvirt-bin" . | include "helm-toolkit.utils.daemonset_overrides_root" }}
{{- else }}
{{- $daemonset_yaml := list $daemonset $configMapName $serviceAccountName . | include "libvirt.daemonset" | toString | fromYaml }}
{{- list $daemonset $daemonset_yaml $configmap_yaml $configMapName . | include "helm-toolkit.utils.daemonset_overrides" }}
{{- end }}
{{- end }}
