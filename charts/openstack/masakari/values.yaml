# Copyright 2021 Mirantis Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for masakari
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

---
release_group: null

labels:
  api:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  engine:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  monitors:
    node_selector_key: openstack-compute-node
    node_selector_value: enabled
  job:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  test:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled

images:
  tags:
    test: docker.io/xrally/xrally-openstack:2.0.0
    dep_check: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
    db_init: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    db_drop: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    bootstrap: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    masakari_db_sync: docker.io/kolla/ubuntu-source-masakari-api:ocata
    ks_user: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    ks_service: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    ks_endpoints: docker.io/openstackhelm/heat:ocata-ubuntu_xenial
    masakari_api: docker.io/kolla/ubuntu-source-masakari-api:ocata
    masakari_engine: docker.io/kolla/ubuntu-source-masakari-base:ocata
    masakari_monitors: docker.io/kolla/ubuntu-source-masakari-base:ocata
    masakari_db_purge: docker.io/kolla/ubuntu-source-masakari-api:ocata
    image_repo_sync: docker.io/docker:17.07.0
  pull_policy: "IfNotPresent"
  local_registry:
    active: false
    exclude:
      - dep_check
      - image_repo_sync

jobs:
  db_purge:
    cron: "1 7 * * 1"
    history:
      success: 3
      failed: 1
    script:
      config:
        age: 90
        max_rows: 1000
      template: |
        #!/bin/bash
        set -ex
        age={{ .Values.jobs.db_purge.script.config.age }}
        max_rows={{ .Values.jobs.db_purge.script.config.max_rows }}
        masakari-manage db purge --age_in_days $age --max_rows ${max_rows}
network:
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    external_policy_local: false
    node_port:
      enabled: false
      port: 15868

dependencies:
  dynamic:
    common:
      local_image_registry:
        jobs:
          - masakari-image-repo-sync
        services:
          - endpoint: node
            service: local_image_registry
    job_ks_endpoints:
      api:
        jobs:
          - masakari-ks-endpoints
      events_cleaner:
        jobs:
          - masakari-ks-endpoints
  static:
    api:
      jobs:
        - masakari-db-sync
        - masakari-ks-user
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: identity
    engine:
      services:
        - endpoint: internal
          service: instance_ha
    monitors:
      pod:
        - requireSameNode: true
          labels:
            application: libvirt
            component: libvirt
      services:
        - endpoint: internal
          service: instance_ha
    bootstrap:
      services:
        - endpoint: internal
          service: identity
    db_init:
      services:
        - endpoint: internal
          service: oslo_db
    db_sync:
      jobs:
        - masakari-db-init
      services:
        - endpoint: internal
          service: oslo_db
    db_drop:
      services:
        - endpoint: internal
          service: oslo_db
    db_purge:
      jobs:
        - masakari-db-sync
      services:
        - endpoint: internal
          service: oslo_db
    ks_endpoints:
      jobs:
        - masakari-ks-service
      services:
        - endpoint: internal
          service: identity
    ks_service:
      services:
        - endpoint: internal
          service: identity
    ks_user:
      services:
        - endpoint: internal
          service: identity
    image_repo_sync:
      services:
        - endpoint: internal
          service: local_image_registry
    tests:
      jobs:
        - masakari-db-sync
      services:
        - endpoint: internal
          service: identity
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: event

# Names of secrets used by bootstrap and environmental checks
secrets:
  identity:
    admin: masakari-keystone-admin
    masakari: masakari-keystone-user
    test: masakari-keystone-test
  oslo_db:
    admin: masakari-db-admin
    masakari: masakari-db-user
  tls:
    instance_ha:
      api:
        public: masakari-tls-public
  oslo_messaging:
    admin: masakari-rabbitmq-admin
    nova: masakari-rabbitmq-user

bootstrap:
  enabled: false
  ks_user: masakari
  script: |
    openstack token issue

conf:
  libvirt:
    tls: false
    interface: ens3
  monitors:
    process:
# NOTE (ohryhorov): process monitor is disabled due to the fact
# that a process inside the container and whole contaners are
# controlled by kubernetes.
      enabled: false
    host:
# NOTE (ohryhorov): host monitor is disabled bacause hosts in k8s
# cluster are controlled by apper abstraction.
      enabled: false
    instance:
      enabled: true
    introspective:
      enabled: false
  software:
    apache2:
      binary: apache2
      start_parameters: -DFOREGROUND
      conf_dir: /etc/apache2/conf-enabled
      site_dir: /etc/apache2/sites-enable
      mods_dir: /etc/apache2/mods-available
      a2enmod: null
      a2dismod: null
  apache_wsgi:
    config:
      keepalive_timeout: 75
      user_ident: masakari
      script_name: masakari-wsgi
      processes: 3
      service_name: instance_ha
      endpoint:
        type: instance_ha
        endpoint: internal
        port: api
    template: |
      {{ include "helm-toolkit.snippets.apache_wsgi_config" ( tuple $ .Values.conf.apache_wsgi ) }}
  monitors_sudoers: |
    # This sudoers file supports rootwrap for both Kolla and LOCI Images.
    Defaults !requiretty
    Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/var/lib/openstack/bin:/var/lib/kolla/venv/bin"
    #masakari-monitors ALL = (root) NOPASSWD: /var/lib/kolla/venv/bin/nova-rootwrap /etc/nova/rootwrap.conf *, /var/lib/openstack/bin/nova-rootwrap /etc/nova/rootwrap.conf *
  paste:
    composite:masakari_api:
      use: call:masakari.api.urlmap:urlmap_factory
      /: apiversions
      /v1: masakari_api_v1
    composite:masakari_api_v1:
      use: call:masakari.api.auth:pipeline_factory_v1
      keystone: cors http_proxy_to_wsgi request_id faultwrap sizelimit authtoken keystonecontext osapi_masakari_app_v1
      noauth2: cors http_proxy_to_wsgi request_id faultwrap sizelimit noauth2 osapi_masakari_app_v1
    filter:cors:
      paste.filter_factory: oslo_middleware.cors:filter_factory
      oslo_config_project: masakari
    filter:http_proxy_to_wsgi:
      paste.filter_factory: oslo_middleware.http_proxy_to_wsgi:HTTPProxyToWSGI.factory
    filter:request_id:
      paste.filter_factory: oslo_middleware:RequestId.factory
    filter:faultwrap:
      paste.filter_factory: masakari.api.openstack:FaultWrapper.factory
    filter:sizelimit:
      paste.filter_factory: oslo_middleware:RequestBodySizeLimiter.factory
    filter:authtoken:
      paste.filter_factory: keystonemiddleware.auth_token:filter_factory
    filter:keystonecontext:
      paste.filter_factory: masakari.api.auth:MasakariKeystoneContext.factory
    filter:noauth2:
      paste.filter_factory: masakari.api.auth:NoAuthMiddleware.factory
    app:osapi_masakari_app_v1:
      paste.app_factory: masakari.api.openstack.ha:APIRouterV1.factory
    pipeline:apiversions:
      pipeline: faultwrap http_proxy_to_wsgi apiversionsapp
    app:apiversionsapp:
      paste.app_factory: masakari.api.openstack.ha.versions:Versions.factory
  policy: {}
  policy.d: {}
  masakari:
    DEFAULT:
      log_config_append: /etc/masakari/logging.conf
      graceful_shutdown_timeout: 5
      os_privileged_user_tenant: admin
      os_privileged_user_password: admin
      os_privileged_user_name: nova
      use_syslog: False
      debug: False
      masakari_api_workers: 1
    database:
      max_retries: -1
    keystone_authtoken:
      auth_version: v3
      auth_type: password
      memcache_security_strategy: ENCRYPT
      service_token_roles_required: true
    taskflow: {}
    api:
      api_interface: internal
    oslo_middleware:
      enable_proxy_headers_parsing: true
  masakarimonitors:
    DEFAULT:
      log_config_append: /etc/masakarimonitors/logging.conf
      debug: False
    api:
      api_version: v1
      api_interface: internal
  process_list:
    - process_name: /usr/sbin/libvirtd
      start_command: systemctl start libvirt-bin
      pre_start_command:
      post_start_command:
      restart_command: systemctl restart libvirt-bin
      pre_restart_command:
      post_restart_command:
      run_as_root: True
    - process_name: /usr/local/bin/nova-compute
      start_command: systemctl start nova-compute
      pre_start_command:
      post_start_command:
      restart_command: systemctl restart nova-compute
      pre_restart_command:
      post_restart_command:
      run_as_root: True
  logging:
    loggers:
      keys:
      - root
      - masakari
      - masakarimonitors
    handlers:
      keys:
      - stdout
      - stderr
      - "null"
    formatters:
      keys:
      - context
      - default
    logger_root:
      level: WARNING
      handlers: stdout
    logger_masakari:
      level: INFO
      handlers: ""
      qualname: masakari
    logger_masakarimonitors:
      level: INFO
      handlers: ""
      qualname: masakarimonitors
    logger_amqp:
      level: WARNING
      handlers: ""
      qualname: amqp
    logger_amqplib:
      level: WARNING
      handlers: ""
      qualname: amqplib
    logger_eventletwsgi:
      level: WARNING
      handlers: ""
      qualname: eventlet.wsgi.server
    logger_sqlalchemy:
      level: WARNING
      handlers: ""
      qualname: sqlalchemy
    logger_boto:
      level: WARNING
      handlers: ""
      qualname: boto
    handler_null:
      class: logging.NullHandler
      formatter: default
      args: ()
    handler_stdout:
      class: StreamHandler
      args: (sys.stdout,)
      formatter: context
    handler_stderr:
      class: StreamHandler
      args: (sys.stderr,)
      formatter: context
    formatter_context:
      class: oslo_log.formatters.ContextFormatter
      datefmt: "%Y-%m-%d %H:%M:%S"
    formatter_default:
      format: "%(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"

# typically overriden by environmental
# values, but should include all endpoints
# required by this chart
endpoints:
  cluster_domain_suffix: cluster.local
  local_image_registry:
    name: docker-registry
    namespace: docker-registry
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        node: 5000
  identity:
    name: keystone
    auth:
      admin:
        region_name: RegionOne
        username: admin
        password: password
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      masakari:
        role: admin,service
        region_name: RegionOne
        username: masakari
        password: password
        project_name: service
        user_domain_name: service
        project_domain_name: service
      test:
        region_name: RegionOne
        username: test
        password: password
        project_name: test
        user_domain_name: service
        project_domain_name: service
    hosts:
      default: keystone
      internal: keystone-api
    host_fqdn_override:
      default: null
    path:
      default: /v3
    scheme:
      default: 'http'
    port:
      api:
        default: 80
        internal: 5000
  instance_ha:
    name: masakari
    hosts:
      default: masakari-api
      public: masakari
    host_fqdn_override:
      default: null
      # NOTE: this chart supports TLS for fqdn over-ridden public
      # endpoints using the following format:
      # public:
      #   host: null
      #   tls:
      #     crt: null
      #     key: null
    path:
      default: /v1
    scheme:
      default: 'http'
    port:
      api:
        default: 15868
        public: 80
  oslo_db:
    auth:
      admin:
        username: root
        password: password
        secret:
          tls:
            internal: mariadb-tls-direct
      masakari:
        username: masakari
        password: password
    hosts:
      default: mariadb
    host_fqdn_override:
      default: null
    path: /masakari
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
  oslo_cache:
    auth:
      # NOTE: this is used to define the value for keystone
      # authtoken cache encryption key, if not set it will be populated
      # automatically with a random value, but to take advantage of
      # this feature all services should be set to use the same key,
      # and memcache service.
      memcache_secret_key: null
    hosts:
      default: memcached
    host_fqdn_override:
      default: null
    port:
      memcache:
        default: 11211
  oslo_messaging:
    auth:
      admin:
        username: rabbitmq
        password: password
      masakari:
        username: masakari
        password: password
    statefulset:
      replicas: 2
      name: rabbitmq-rabbitmq
    hosts:
      default: rabbitmq
    host_fqdn_override:
      default: null
    path: /masakari
    scheme: rabbit
    port:
      amqp:
        default: 5672
      http:
        default: 15672
  fluentd:
    namespace: null
    name: fluentd
    hosts:
      default: fluentd-logging
    host_fqdn_override:
      default: null
    path:
      default: null
    scheme: 'http'
    port:
      service:
        default: 24224
      metrics:
        default: 24220

network_policy: {}

pod:
  probes:
    rpc_timeout: 30
    rpc_retries: 2
    masakari_engine:
      masakari_engine:
        readiness:
          enabled: True
          params:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
        liveness:
          enabled: True
          params:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
    masakari_api:
      masakari_api:
        readiness:
          enabled: True
          params:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
        liveness:
          enabled: True
          params:
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
    monitors:
      instancemonitor:
        liveness:
          enabled: True
          params:
            initialDelaySeconds: 120
            periodSeconds: 90
            timeoutSeconds: 70
        readiness:
          enabled: True
          params:
            initialDelaySeconds: 80
            periodSeconds: 90
            timeoutSeconds: 70
      introspectiveinstancemonitor:
        liveness:
          enabled: True
          params:
            initialDelaySeconds: 120
            periodSeconds: 90
            timeoutSeconds: 70
        readiness:
          enabled: True
          params:
            initialDelaySeconds: 80
            periodSeconds: 90
            timeoutSeconds: 70
  security_context:
    masakari_api:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
      container:
        masakari_api:
          capabilities:
            drop:
              - ALL
    masakari_engine:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
      container:
        masakari_engine:
          capabilities:
            drop:
              - ALL
    masakari_monitors:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
      container:
        processmonitor:
          privileged: true
        hostmonitor:
          privileged: true
        instance_monitors_init:
          privileged: false
          capabilities:
            drop:
              - ALL
        instancemonitor:
          # instance monitor just needs connection to libvirt
          # so all privileges can be dropped
          privileged: false
          capabilities:
            drop:
              - ALL
        introspectiveinstancemonitor:
          # instance monitor just needs connection to libvirt
          # so all privileges can be dropped
          privileged: false
          capabilities:
            drop:
              - ALL
    bootstrap:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        bootstrap:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_init:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        db_init:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_purge:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        db_purge:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_sync:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        db_sync:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_user:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        ks_user:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_endpoints:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        ks_endpoints:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_service:
      pod:
        fsGroup: 42424
        runAsUser: 42424
        runAsNonRoot: true
        allowPrivilegeEscalation: false
      container:
        ks_service:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
  affinity:
    anti:
      type:
        default: preferredDuringSchedulingIgnoredDuringExecution
      topologyKey:
        default: kubernetes.io/hostname
      weight:
        default: 10
  mounts:
    masakari_api:
      init_container: null
      masakari_api:
        volumeMounts:
        volumes:
    masakari_engine:
      init_container: null
      masakari_api:
        volumeMounts:
        volumes:
    masakari_bootstrap:
      init_container: null
      masakari_bootstrap:
        volumeMounts:
        volumes:
    masakari_tests:
      init_container: null
      masakari_tests:
        volumeMounts:
        volumes:
    masakari_db_sync:
      masakari_db_sync:
        volumeMounts:
        volumes:
    masakari_monitors:
      init_container: null
      masakari_monitors:
        volumeMounts:
        volumes:
  replicas:
    api: 1
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
      daemonsets:
        pod_replacement_strategy: RollingUpdate
        monitors:
          enabled: true
          min_ready_seconds: 0
          max_unavailable: 1
    disruption_budget:
      api:
        min_available: 0
      engine:
        min_available: 0
    termination_grace_period:
      api:
        timeout: 600
      engine:
        timeout: 600
  resources:
    enabled: false
    api:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_purge:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_user:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_service:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_endpoints:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_drop:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      tests:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      image_repo_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

manifests:
  secret_ca_bundle: false
  configmap_bin: true
  configmap_etc: true
  configmap_bin_aux: true
  configmap_oslo_policy: true
  deployment_api: true
  deployment_engine: true
  daemonset_monitors: true
  cron_job_db_purge: false
  ingress_api: true
  job_bootstrap: true
  job_db_drop: false
  job_db_init: true
  job_image_repo_sync: true
  job_db_sync: true
  job_ks_endpoints: true
  job_ks_service: true
  job_ks_user: true
  job_rabbit_init: true
  network_policy: false
  pdb_api: true
  secret_db: true
  secret_keystone: true
  secret_ingress_tls: true
  service_api: true
  service_ingress_api: true

...
