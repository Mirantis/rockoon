# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for designate.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

---
release_group: null

labels:
  api:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  central:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  producer:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  job:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  mdns:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  sink:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled

images:
  tags:
    bootstrap: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    db_init: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    db_drop: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    rabbit_init: docker.io/rabbitmq:3.7-management
    ks_user: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    ks_service: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    ks_endpoints: docker.io/openstackhelm/heat:queens-ubuntu_xenial
    dep_check: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
    designate_db_sync: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_api: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_central: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_mdns: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_worker: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_producer: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_sink: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_pool_manage: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_pool_manage_hash: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    designate_zone_setup: docker.io/openstackhelm/designate:queens-ubuntu_xenial
    powerdns_db_sync: docker.io/psitrax/powerdns:v4.2.0
    powerdns: docker.io/psitrax/powerdns:v4.2.0
  pull_policy: "IfNotPresent"
  local_registry:
    active: false
    exclude:
      - dep_check
      - image_repo_sync

pod:
  security_context:
    designate:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
        sysctls:
          - name: net.ipv4.ip_unprivileged_port_start
            value: "0"
      container:
        designate_api:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_central:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_mdns:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_producer:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_sink:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_worker:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        designate_powerdns:
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsUser: 65534
          fsGroup: 65534
          capabilities:
            drop:
              - ALL
    bootstrap:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        bootstrap:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_init:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        db_init:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_purge:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        db_purge:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    db_sync:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        db_sync:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_user:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        ks_user:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_endpoints:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        ks_endpoints:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    ks_service:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        ks_service:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    pool_manage:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        check_hash:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        pool_update:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    zone_setup:
      pod:
        runAsUser: 42424
        runAsNonRoot: true
        fsGroup: 42424
      container:
        zone_setup:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
    powerdns_db_sync:
      pod:
        # use pdns user when it has id bigger than 1000
        runAsUser: 65534
        runAsNonRoot: true
        fsGroup: 65534
      container:
        powerdns_db_sync:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
  affinity:
    anti:
      type:
        default: requiredDuringSchedulingIgnoredDuringExecution
        api: preferredDuringSchedulingIgnoredDuringExecution
      topologyKey:
        default: kubernetes.io/hostname
  mounts:
    designate_api:
      init_container: null
      designate_api:
        volumeMounts:
        volumes:
    designate_bootstrap:
      init_container: null
      designate_bootstrap:
        volumeMounts:
        volumes:
    designate_pool_manage:
      init_container: null
      designate_pool_manage:
        volumeMounts:
        volumes:
      init_container: null
    designate_zone_setup:
      init_container: null
      designate_zone_setup:
        volumeMounts:
        volumes:
      init_container: null
    designate_central:
        volumeMounts:
        volumes:
    designate_mdns:
      init_container: null
      designate_mdns:
        volumeMounts:
        volumes:
      designate_worker:
        volumeMounts:
        volumes:
    designate_producer:
      init_container: null
      designate_producer:
        volumeMounts:
        volumes:
    designate_sink:
      init_container: null
      designate_sink:
        volumeMounts:
        volumes:
    designate_db_sync:
      designate_db_sync:
        volumeMounts:
        volumes:
    designate_powerdns_db_sync:
      designate_powerdns_db_sync:
        volumeMounts:
        volumes:
  replicas:
    api: 1
    central: 1
    mdns: 1
    producer: 1
    sink: 1
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
    disruption_budget:
      api:
        min_available: 0
      central:
        min_available: 0
      mdns:
        min_available: 0
      producer:
        min_available: 0
      sink:
        min_available: 0
    termination_grace_period:
      api:
        timeout: 30
      mdns:
        timeout: 30

  resources:
    enabled: false
    api:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      pool_manage:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      zone_setup:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_endpoints:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_service:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_user:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      rabbit_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      tests:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
  probes:
    rpc_timeout: 30
    central:
      central:
        liveness:
          enabled: True
          params:
            periodSeconds: 90
            timeoutSeconds: 70
        readiness:
          enabled: True
          params:
            periodSeconds: 60
            timeoutSeconds: 70
    producer:
      producer:
        liveness:
          enabled: True
          params:
            periodSeconds: 90
            timeoutSeconds: 70
        readiness:
          enabled: True
          params:
            periodSeconds: 60
            timeoutSeconds: 70
    api:
      api:
        readiness:
          enabled: true
          params:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        liveness:
          enabled: true
          params:
            periodSeconds: 15
            timeoutSeconds: 5
    powerdns:
      powerdns:
        readiness:
          enabled: true
          params:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        liveness:
          enabled: true
          params:
            periodSeconds: 15
            timeoutSeconds: 10
    mdns:
      mdns:
        readiness:
          enabled: true
          params:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
        liveness:
          enabled: true
          params:
            periodSeconds: 15
            timeoutSeconds: 10
      worker:
        liveness:
          enabled: True
          params:
            periodSeconds: 90
            timeoutSeconds: 70
        readiness:
          enabled: True
          params:
            periodSeconds: 60
            timeoutSeconds: 70
network:
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    external_policy_local: false
    node_port:
      enabled: false
      port: 9001
  mdns:
    name: "designate-mdns"
    proto: "http"
    external_policy_local: false
    node_port:
      enabled: true
      port: 5354
  powerdns:
    node_port_enabled: false
    external_policy_local: false
    external: {}
# Example below shows how to configure Service for PowerDNS
# and set specific IP address for both or single service which
# is enabled by appropriate manifest.
#      service:
#        loadBalancerIP: 1.1.1.1
  powerdns_external:
    annotations: {}
  powerdns_external_tcp:
    annotations: {}

network_policy: {}

bootstrap:
  enabled: false
  script: |
    openstack token issue

dependencies:
  dynamic:
    common:
      local_image_registry:
        jobs:
          - designate-image-repo-sync
        services:
          - endpoint: node
            service: local_image_registry
    job_rabbit_init:
      api:
        jobs:
          - designate-rabbit-init
      sink:
        jobs:
          - designate-rabbit-init
      central:
        jobs:
          - designate-rabbit-init
    job_ks_endpoints:
      api:
        jobs:
          - designate-ks-endpoints
      central:
        jobs:
          - designate-ks-endpoints
      worker:
        jobs:
          - designate-ks-endpoints
      mdns:
        jobs:
          - designate-ks-endpoints
      producer:
        jobs:
          - designate-ks-endpoints
      sink:
        jobs:
          - designate-ks-endpoints
  static:
    db_init:
      services:
        - service: oslo_db
          endpoint: internal
    db_sync:
      jobs:
        - designate-db-init
      services:
        - service: oslo_db
          endpoint: internal
    powerdns_db_sync:
      jobs:
        - designate-powerdns-db-init
      services:
        - service: oslo_db
          endpoint: internal
    pool_manage:
      jobs:
        - designate-db-sync
      statefulset:
        - designate-mdns
        - designate-producer
        - designate-central
    zone_setup:
      services:
        - service: dns
          endpoint: internal
      statefulset:
        - designate-mdns
        - designate-producer
        - designate-central
      jobs:
        - designate-db-sync
        - designate-ks-endpoints
        - designate-pool-manage
    ks_user:
      services:
        - service: identity
          endpoint: internal
    ks_service:
      services:
        - service: identity
          endpoint: internal
    ks_endpoints:
      jobs:
        - designate-ks-service
      services:
        - service: identity
          endpoint: internal
    rabbit_init:
      services:
        - service: oslo_messaging
          endpoint: internal
    api:
      jobs:
        - designate-db-sync
        - designate-ks-user
      service:
        - service: oslo_db
          endpoint: internal
        - service: identity
          endpoint: internal
        - service: oslo_messaging
          endpoint: internal
    central:
      jobs:
        - designate-db-sync
        - designate-ks-user
      service:
        - service: oslo_db
          endpoint: internal
        - service: identity
          endpoint: internal
        - service: oslo_messaging
          endpoint: internal
    mdns:
      jobs:
        - designate-db-sync
        - designate-ks-user
      services:
        - service: oslo_db
          endpoint: internal
        - service: identity
          endpoint: internal
    producer:
      jobs:
        - designate-db-sync
        - designate-ks-user
      services:
        - service: oslo_db
          endpoint: internal
        - service: identity
          endpoint: internal
    sink:
      jobs:
        - designate-db-sync
        - designate-ks-user
      services:
        - service: oslo_db
          endpoint: internal
        - service: identity
          endpoint: internal
conf:
  zones: |
    # zone.name.:
    #   email: test@test.test
    #   recordsets:
    #     - name: foo.zone.name
    #       type: A
    #       record:
    #         - 1.2.3.4
  software:
    apache2:
      enabled: false
      binary: apache2
      start_parameters: -DFOREGROUND
      conf_dir: /etc/apache2/conf-enabled
      site_dir: /etc/apache2/sites-enable
      mods_dir: /etc/apache2/mods-available
      a2enmod: null
      a2dismod: null
  powerdns:
    slave: "yes"
    dnsupdate: "yes"
    api: "yes"
    cache_ttl: 0
    query_cache_ttl: 0
    negquery_cache_ttl: 0
    webserver: "yes"
    webserver_address: 0.0.0.0
    webserver_allow_from: 0.0.0.0/0
    gmysql_dbname: powerdns
    gmysql_dnssec: "yes"
    socket-dir: /run/pdns
    setgid: 65534
    setuid: 65534
  mysql:
    client:
      database: powerdns
  pools: |
    - name: default
      # The name is immutable. There will be no option to change the name after
      # creation and the only way will to change it will be to delete it
      # (and all zones associated with it) and recreate it.
      description: Default Pool

      attributes: {}

      # List out the NS records for zones hosted within this pool
      # This should be a record that is created outside of designate, that
      # points to the public IP of the controller node.
      ns_records:
        - hostname: {{ printf "ns.%s.svc.%s." .Release.Namespace .Values.endpoints.cluster_domain_suffix }}
          priority: 1

      # List out the nameservers for this pool. These are the actual DNS servers.
      # We use these to verify changes have propagated to all nameservers.
      nameservers:
        - host: {{`{{ POWERDNS_SVC_EXTERNAL_IP }}`}}
          port: {{ tuple "powerdns" "internal" "powerdns" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}

      # List out the targets for this pool. For BIND there will be one
      # entry for each BIND server, as we have to run rndc command on each server
      targets:
        - type: pdns4
          description: PowerDNS Server

          # List out the designate-mdns servers from which PowerDNS servers should
          # request zone transfers (AXFRs) from.
          # This should be the IP of the controller node.
          # If you have multiple controllers you can add multiple masters
          # by running designate-mdns on them, and adding them here.
          # NOTE(vsaienko): only from this list NOFIY message are allowed, should include
          # all MDNS and WORKER nodes. We use combo mdns/powerdns/worker deployment all services
          # communicate via 127.0.0.1 on local node.
          {{- $mdns_internal_port := tuple "mdns" "internal" "ipc" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
          masters:
            - host: 127.0.0.1
              port: {{ $mdns_internal_port }}

          # PowerDNS Configuration options
          options:
            # Defines powerdns host where to send NOTIFY from worker node. Do not use service as source IP
            # should match that is defined in masters.
            host: 127.0.0.1
            port: {{ tuple "powerdns" "internal" "powerdns" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
            # Use local powerdns instance from combo pod deployment
            api_endpoint: http://127.0.0.1:{{ tuple "powerdns" "internal" "powerdns_api" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
            api_token: {{ tuple "powerdns" "service" . | include "helm-toolkit.endpoints.endpoint_token_lookup" }}


  paste:
    composite:osapi_dns:
      use: egg:Paste#urlmap
      /: osapi_dns_versions
      /v2: osapi_dns_v2
      /admin: osapi_dns_admin
    composite:osapi_dns_versions:
      use: call:designate.api.middleware:auth_pipeline_factory
      noauth: http_proxy_to_wsgi cors maintenance faultwrapper osapi_dns_app_versions
      keystone: http_proxy_to_wsgi cors maintenance faultwrapper osapi_dns_app_versions
    app:osapi_dns_app_versions:
      paste.app_factory: designate.api.versions:factory
    composite:osapi_dns_v2:
      use: call:designate.api.middleware:auth_pipeline_factory
      noauth: http_proxy_to_wsgi cors request_id faultwrapper validation_API_v2 noauthcontext maintenance normalizeuri osapi_dns_app_v2
      keystone: http_proxy_to_wsgi cors request_id faultwrapper validation_API_v2 authtoken audit keystonecontext maintenance normalizeuri osapi_dns_app_v2
    app:osapi_dns_app_v2:
      paste.app_factory: designate.api.v2:factory
    composite:osapi_dns_admin:
      use: call:designate.api.middleware:auth_pipeline_factory
      noauth: http_proxy_to_wsgi cors request_id faultwrapper noauthcontext maintenance normalizeuri osapi_dns_app_admin
      keystone: http_proxy_to_wsgi cors request_id faultwrapper authtoken audit keystonecontext maintenance normalizeuri osapi_dns_app_admin
    app:osapi_dns_app_admin:
      paste.app_factory: designate.api.admin:factory
    filter:cors:
      paste.filter_factory: oslo_middleware.cors:filter_factory
      oslo_config_project: designate
    filter:request_id:
      paste.filter_factory: oslo_middleware:RequestId.factory
    filter:http_proxy_to_wsgi:
      paste.filter_factory: oslo_middleware:HTTPProxyToWSGI.factory
    filter:noauthcontext:
      paste.filter_factory: designate.api.middleware:NoAuthContextMiddleware.factory
    filter:authtoken:
      paste.filter_factory: keystonemiddleware.auth_token:filter_factory
    filter:audit:
      paste.filter_factory: keystonemiddleware.audit:filter_factory
      audit_map_file: /etc/designate/api_audit_map.conf
    filter:keystonecontext:
      paste.filter_factory: designate.api.middleware:KeystoneContextMiddleware.factory
    filter:maintenance:
      paste.filter_factory: designate.api.middleware:MaintenanceMiddleware.factory
    filter:normalizeuri:
      paste.filter_factory: designate.api.middleware:NormalizeURIMiddleware.factory
    filter:faultwrapper:
      paste.filter_factory: designate.api.middleware:FaultWrapperMiddleware.factory
    filter:validation_API_v2:
      paste.filter_factory: designate.api.middleware:APIv2ValidationErrorMiddleware.factory
  api_audit_map:
    DEFAULT:
      target_endpoint_type: dns
    path_keywords:
      zones: zone
      pools: pool
      tlds: tld
      tsigkeys: tsigkey
      blacklists: blacklist
      quotas: quota
      floatingips: floatingip
    service_endpoints:
      dns: 'service/dns'
  policy: {}
  policy.d: {}
  designate:
    DEFAULT:
      debug: false
      log_config_append: /etc/designate/logging.conf
      rpc_ping_enabled: true
    service:api:
      auth_strategy: keystone
      enable_api_v2: true
      enable_api_admin: true
      enabled_extensions_v2: quotas,reports
      workers: 2
    service:worker:
      enabled: true
      notify: false
    audit_middleware_notifications:
      publisher: designate-api
    oslo_middleware:
      enable_proxy_headers_parsing: true
    oslo_policy:
      policy_file: /etc/designate/policy.yaml
      policy_dirs: /etc/designate/policy.d/
    database:
      max_retries: -1
    storage:sqlalchemy:
      max_retries: -1
    keystone_authtoken:
      auth_version: v3
      auth_type: password
      memcache_security_strategy: ENCRYPT
    oslo_messaging_notifications:
      driver: messagingv2
  logging:
    loggers:
      keys:
        - root
        - designate
        - oslo_notification_audit
    handlers:
      keys:
        - stdout
        - stderr
        - "null"
    formatters:
      keys:
        - context
        - default
    logger_root:
      level: WARNING
      handlers: stdout
    logger_designate:
      level: INFO
      handlers: ""
      qualname: designate
    logger_oslo_notification_audit:
      level: INFO
      handlers: ""
      qualname: oslo.messaging.notification.audit
    logger_amqp:
      level: WARNING
      handlers: ""
      qualname: amqp
    logger_amqplib:
      level: WARNING
      handlers: ""
      qualname: amqplib
    logger_eventletwsgi:
      level: WARNING
      handlers: ""
      qualname: eventlet.wsgi.server
    logger_sqlalchemy:
      level: WARNING
      handlers: ""
      qualname: sqlalchemy
    logger_boto:
      level: WARNING
      handlers: ""
      qualname: boto
    handler_null:
      class: logging.NullHandler
      formatter: default
      args: ()
    handler_stdout:
      class: StreamHandler
      args: (sys.stdout,)
      formatter: context
    handler_stderr:
      class: StreamHandler
      args: (sys.stderr,)
      formatter: context
    formatter_context:
      class: oslo_log.formatters.ContextFormatter
      datefmt: "%Y-%m-%d %H:%M:%S"
    formatter_default:
      format: "%(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
  apache_wsgi:
    config:
      keepalive_timeout: 75
      user_ident: designate
      script_name: designate-api-wsgi
      processes: 1
      service_name: dns
      endpoint:
        type: dns
        endpoint: internal
        port: api
    template: |
      {{ include "helm-toolkit.snippets.apache_wsgi_config" ( tuple $ .Values.conf.apache_wsgi ) }}

# Names of secrets used by bootstrap and environmental checks
secrets:
  identity:
    admin: designate-keystone-admin
    designate: designate-keystone-user
    test: designate-keystone-test
  oslo_db:
    admin: designate-db-admin
    designate: designate-db-user
  oslo_db_powerdns:
    admin: designate-powerdns-db-admin
    powerdns: designate-powerdns-db-user
  oslo_messaging:
    admin: designate-rabbitmq-admin
    designate: designate-rabbitmq-user
  tls:
    dns:
      api:
        public: designate-tls-public

endpoints:
  cluster_domain_suffix: cluster.local
  local_image_registry:
    name: docker-registry
    namespace: docker-registry
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        node: 5000
  identity:
    name: keystone
    auth:
      admin:
        region_name: RegionOne
        username: admin
        password: password
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      designate:
        role: admin,service
        region_name: RegionOne
        username: designate
        password: password
        project_name: service
        user_domain_name: service
        project_domain_name: service
      test:
        region_name: RegionOne
        username: designate-test
        password: password
        project_name: test
        user_domain_name: service
        project_domain_name: service
    hosts:
      default: keystone
      internal: keystone-api
    host_fqdn_override:
      default: null
    path:
      default: /v3
    scheme:
      default: http
    port:
      api:
        default: 80
        internal: 5000
  dns:
    name: designate
    hosts:
      default: designate-api
      public: designate
    host_fqdn_override:
      default: null
    path:
      default: /
    scheme:
      default: 'http'
    port:
      api:
        default: 9001
        public: 80
  mdns:
    name: minidns
    hosts:
      default: minidns
      public: designate-mdns
      discovery: designate-mdns
    host_fqdn_override:
      default: null
    path:
      default: null
    scheme:
      default: 'tcp'
    port:
      ipc:
        default: 5354
  oslo_db:
    auth:
      admin:
        username: root
        password: password
      designate:
        username: designate
        password: password
    hosts:
      default: mariadb
    host_fqdn_override:
      default: null
    path: /designate
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
  oslo_db_powerdns:
    auth:
      admin:
        username: root
        password: password
      powerdns:
        username: powerdns
        password: password
    hosts:
      default: mariadb
    host_fqdn_override:
      default: null
    path: /powerdns
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
  oslo_cache:
    hosts:
      default: memcached
    host_fqdn_override:
      default: null
    port:
      memcache:
        default: 11211
    auth:
      # NOTE: this is used to define the value for keystone
      # authtoken cache encryption key, if not set it will be populated
      # automatically with a random value, but to take advantage of
      # this feature all services should be set to use the same key,
      # and memcache service.
      memcache_secret_key: null
  oslo_messaging:
    auth:
      admin:
        username: rabbitmq
        password: password
      designate:
        username: designate
        password: password
    statefulset:
      replicas: 2
      name: rabbitmq-rabbitmq
    hosts:
      default: rabbitmq
    host_fqdn_override:
      default: null
    path: /designate
    scheme: rabbit
    port:
      amqp:
        default: 5672
      http:
        default: 15672
  powerdns:
    auth:
      service:
        token: chiave_segreta
    hosts:
      default: designate-powerdns
    host_fqdn_override:
      default: null
    port:
      powerdns_api:
        default: 8081
      powerdns_tcp:
        default: 53
      powerdns:
        default: 53
        protocol: UDP

manifests:
  configmap_bin: true
  configmap_etc: true
  configmap_oslo_policy: true
  deployment_api: false
  deployment_central: false
  deployment_producer: false
  deployment_mdns: false
  deployment_sink: false
  ingress_api: true
  job_bootstrap: true
  job_pool_manage: true
  job_zone_setup: false
  job_db_init: true
  job_db_sync: true
  job_ks_endpoints: true
  job_ks_service: true
  job_ks_user: true
  job_rabbit_init: true
  network_policy: false
  pdb_api: true
  pdb_producer: true
  pdb_central: true
  pdb_mdns: true
  pdb_sink: false
  secret_ca_bundle: false
  secret_db: true
  secret_ingress_tls: true
  secret_keystone: true
  secret_rabbitmq: true
  service_api: true
  service_mdns: true
  service_ingress_api: true
  service_powerdns_external: false
  service_powerdns_external_tcp: false
  secret_powerdns_db: false
  service_powerdns_api: false
  designate_powerdns: false
  configmap_powerdns_bin: false
  configmap_powerdns_etc: false
  job_powerdns_db_sync: false
  job_powerdns_db_init: false
  statefulset_api: true
  statefulset_central: true
  statefulset_producer: true
  statefulset_mdns: true
  designate_mdns_discovery: true
...
