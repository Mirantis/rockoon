{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- define "ovnVPNAgentProbeTemplate" }}
{{- $probeType := index . 0 }}
{{- $envAll := index . 1 }}
exec:
  command:
    - python
    - /tmp/health-probe.py
    - --config-file
    - /etc/neutron/neutron.conf
    - --config-file
    - /etc/neutron/plugins/ml2/ovn_vpn_agent.ini
    - --rabbitmq-queue-name
    - q-agent-notifier-tunnel-update
    - --process-name
    - neutron-ovn-vpn-agent
    - --probe-type
    - {{ $probeType }}
    - --rabbitmq-rpc-timeout
    - {{ $envAll.Values.pod.probes.rpc_timeout | quote}}
{{- if $envAll.Values.pod.use_fqdn.neutron_agent }}
    - --use-fqdn
{{- end }}
{{- end }}

{{- define "neutron.ovn_vpn_agent.daemonset" }}
{{- $daemonset := index . 0 }}
{{- $configMapName := index . 1 }}
{{- $serviceAccountName := index . 2 }}
{{- $envAll := index . 3 }}
{{- with $envAll }}

{{- $mounts_ovn_vpn_agent := .Values.pod.mounts.ovn_vpn_agent.ovn_vpn_agent }}
{{- $mounts_ovn_vpn_agent_init := .Values.pod.mounts.ovn_vpn_agent.init_container }}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: neutron-ovn-vpn-agent
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ tuple $envAll "neutron" "neutron-ovn-vpn-agent" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 4 }}
spec:
  selector:
    matchLabels:
{{ tuple $envAll "neutron" "ovn-vpn-agent" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 6 }}
{{ tuple $envAll "ovn_vpn_agent" | include "helm-toolkit.snippets.kubernetes_upgrades_daemonset" | indent 2 }}
  template:
    metadata:
      labels:
{{ tuple $envAll "neutron" "ovn-vpn-agent" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-etc-hash: {{ tuple "configmap-etc.yaml" . | include "helm-toolkit.utils.hash" }}
        endpoints-hash: {{ .Values.endpoints | include "helm-toolkit.utils.get_hash" }}
{{ dict "envAll" $envAll "podName" "neutron-ovn-vpn-agent-default" "containerNames" (list "init" "neutron-ovn-vpn-agent") | include "helm-toolkit.snippets.kubernetes_mandatory_access_control_annotation" | indent 8 }}
    spec:
{{ dict "envAll" $envAll "application" "ovn_vpn_agent" | include "helm-toolkit.snippets.kubernetes_pod_security_context" | indent 6 }}
      serviceAccountName: {{ $serviceAccountName }}
      nodeSelector:
        {{ .Values.labels.ovn_vpn.node_selector_key }}: {{ .Values.labels.ovn_vpn.node_selector_value }}
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      initContainers:
{{ tuple $envAll "pod_dependency" $mounts_ovn_vpn_agent_init | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
      containers:
        - name: ovn-vpn-agent
{{ tuple $envAll "neutron_ovn_vpn_agent" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.agent.ovn_vpn | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "ovn_vpn_agent" "container" "ovn_vpn_agent" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
{{ dict "envAll" $envAll "component" "ovn_vpn_agent" "container" "ovn_vpn_agent" "type" "readiness" "probeTemplate" ((tuple "readiness" $envAll | include "ovnVPNAgentProbeTemplate") | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
{{ dict "envAll" $envAll "component" "ovn_vpn_agent" "container" "ovn_vpn_agent" "type" "liveness" "probeTemplate" ((tuple "liveness" $envAll |  include "ovnVPNAgentProbeTemplate") | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
          command:
            - /tmp/neutron-ovn-vpn-agent.sh
          volumeMounts:
{{ dict "envAll" $envAll "objectType" "mountpoint" "secretPrefix" "neutron" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 12 }}
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-var-neutron
              mountPath: {{ .Values.conf.neutron.DEFAULT.state_path }}
            - name: neutron-bin
              mountPath: /tmp/neutron-ovn-vpn-agent.sh
              subPath: neutron-ovn-vpn-agent.sh
              readOnly: true
            - name: neutron-bin
              mountPath: /tmp/health-probe.py
              subPath: health-probe.py
              readOnly: true
            - name: pod-shared
              mountPath: /tmp/pod-shared
            - name: neutron-etc
              mountPath: /etc/neutron/neutron.conf
              subPath: neutron.conf
              readOnly: true
            {{- if .Values.conf.neutron.DEFAULT.log_config_append }}
            - name: neutron-etc
              mountPath: {{ .Values.conf.neutron.DEFAULT.log_config_append }}
              subPath: {{ base .Values.conf.neutron.DEFAULT.log_config_append }}
              readOnly: true
            {{- end }}
            - name: neutron-etc
              mountPath: /etc/neutron/plugins/ml2/ml2_conf.ini
              subPath: ml2_conf.ini
              readOnly: true
            - name: neutron-etc
              mountPath: /etc/neutron/plugins/ml2/ovn_vpn_agent.ini
              subPath: ovn_vpn_agent.ini
              readOnly: true
            - name: neutron-etc
              # NOTE (Portdirect): We mount here to override Kollas
              # custom sudoers file when using Kolla images, this
              # location will also work fine for other images.
              mountPath: /etc/sudoers.d/kolla_neutron_sudoers
              subPath: neutron_sudoers
              readOnly: true
            - name: neutron-etc
              mountPath: /etc/neutron/rootwrap.conf
              subPath: rootwrap.conf
              readOnly: true
            {{- range $key, $value := $envAll.Values.conf.rootwrap_filters }}
            {{- if ( has "ovn_vpn_agent" $value.pods ) }}
            {{- $filePrefix := replace "_" "-"  $key }}
            {{- $rootwrapFile := printf "/etc/neutron/rootwrap.d/%s.filters" $filePrefix }}
            - name: neutron-etc
              mountPath: {{ $rootwrapFile }}
              subPath: {{ base $rootwrapFile }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.network.share_namespaces }}
            - name: run
              mountPath: /run
              mountPropagation: Bidirectional
            {{- end }}
{{ if $mounts_ovn_vpn_agent.volumeMounts }}{{ toYaml $mounts_ovn_vpn_agent.volumeMounts | indent 12 }}{{ end }}
      volumes:
{{ dict "envAll" $envAll "objectType" "volume" "secretPrefix" "neutron" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 8 }}
        - name: pod-tmp
          emptyDir: {}
        - name: pod-var-neutron
          emptyDir: {}
        - name: pod-shared
          emptyDir: {}
        - name: neutron-bin
          configMap:
            name: neutron-bin
            defaultMode: 504
        - name: neutron-etc
          secret:
            secretName: {{ $configMapName }}
            defaultMode: 416
        {{- if .Values.network.share_namespaces }}
        - name: run
          hostPath:
            path: /run/
        {{- end }}
{{ if $mounts_ovn_vpn_agent.volumes }}{{ toYaml $mounts_ovn_vpn_agent.volumes | indent 8 }}{{ end }}
{{- end }}
{{- end }}

{{- if .Values.manifests.daemonset_ovn_vpn_agent }}
{{- $envAll := . }}
{{- $daemonset := "ovn-vpn-agent" }}
{{- $configMapName := "neutron-etc" }}
{{- $serviceAccountName := "neutron-ovn-vpn-agent" }}
{{- $dependencyOpts := dict "envAll" $envAll "dependencyMixinParam" $envAll.Values.network.backend "dependencyKey" "ovn_vpn_agent" -}}
{{- $_ := include "helm-toolkit.utils.dependency_resolver" $dependencyOpts | toString | fromYaml }}
{{ tuple $envAll "pod_dependency" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
{{- $daemonset_yaml := list $daemonset $configMapName $serviceAccountName . | include "neutron.ovn_vpn_agent.daemonset" | toString | fromYaml }}
{{- $configmap_yaml := "neutron.configmap.etc" }}

{{/* Preffer using .Values.overrides rather than .Values.conf.overrides */}}
{{- if index (index .Values "overrides" |default dict ) "ovn-vpn-agent" }}
{{- list $daemonset "neutron.ovn_vpn_agent.daemonset" $serviceAccountName $configmap_yaml $configMapName "neutron.configmap.bin" "neutron-bin" . | include "helm-toolkit.utils.daemonset_overrides_root" }}
{{- else }}
{{- list $daemonset $daemonset_yaml $configmap_yaml $configMapName . | include "helm-toolkit.utils.daemonset_overrides" }}
{{- end }}
{{- end }}
