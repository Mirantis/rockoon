{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- define "volumeProbeTemplate" }}
{{- $probeType := . }}
exec:
  command:
    - python
    - /tmp/health-probe.py
    - --config-file
    - /etc/cinder/cinder.conf
    - --probe-type
    - {{ $probeType }}
    - --check
    - rabbitmq_sockets
    - --process-name
    - cinder-volume
{{- end }}

{{- define "cinder.volume.statefulset" }}
  {{- $statefulset := index . 0 }}
  {{- $backendConfName := index . 1 }}
  {{- $serviceAccountName := index . 2 }}
  {{- $envAll := index . 3 }}
  {{- $envBackend := index . 4 }}

  {{- with $envAll }}

{{- $mounts_cinder_volume := .Values.pod.mounts.cinder_volume.cinder_volume }}
{{- $mounts_cinder_volume_init := .Values.pod.mounts.cinder_volume.init_container }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulset }}
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ dict "envAll" $envAll "application" "cinder" "component" "volume" "managed-by" $statefulset | include "helm-toolkit.snippets.kubernetes_metadata_labels_bundle" | indent 4 }}
spec:
  serviceName: {{ $statefulset }}
  podManagementPolicy: "Parallel"
  replicas: {{ .Values.pod.replicas.volume }}
  selector:
    matchLabels:
{{ dict "envAll" $envAll "application" "cinder" "component" "volume" "managed-by" $statefulset | include "helm-toolkit.snippets.kubernetes_metadata_labels_bundle" | indent 6 }}
{{ tuple $envAll | include "helm-toolkit.snippets.kubernetes_upgrades_statefulset" | indent 2 }}
  template:
    metadata:
      labels:
{{ dict "envAll" $envAll "application" "cinder" "component" "volume" "managed-by" $statefulset | include "helm-toolkit.snippets.kubernetes_metadata_labels_bundle" | indent 8 }}
      annotations:
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-etc-hash: {{ tuple "configmap-etc.yaml" . | include "helm-toolkit.utils.hash" }}
        endpoints-hash: {{ .Values.endpoints | include "helm-toolkit.utils.get_hash" }}
{{ dict "envAll" $envAll "podName" "cinder-volume" "containerNames" (list "cinder-volume" "ceph-coordination-volume-perms" "init-cinder-conf" "init" ) | include "helm-toolkit.snippets.kubernetes_mandatory_access_control_annotation" | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName }}
{{ dict "envAll" $envAll "application" "cinder_volume" | include "helm-toolkit.snippets.kubernetes_pod_security_context" | indent 6 }}
      affinity:
{{ dict "envAll" $envAll "application" "cinder" "component" "volume" "managed-by" $statefulset | include "helm-toolkit.snippets.kubernetes_pod_anti_affinity_bundle" | indent 8 }}
      nodeSelector:
        {{ .Values.labels.volume.node_selector_key }}: {{ .Values.labels.volume.node_selector_value }}
{{- if .Values.pod.useHostNetwork.volume }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      initContainers:
{{ tuple $envAll "volume" $mounts_cinder_volume_init | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
        - name: lock-perms
{{ tuple $envAll "cinder_volume" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ dict "envAll" $envAll "application" "cinder_volume" "container" "lock_perms" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          command:
            - chown
            - -R
            - "cinder:"
            - {{ .Values.conf.cinder.oslo_concurrency.lock_path }}
          terminationMessagePath: /var/log/termination-log
          volumeMounts:
            - name: lockpath
              mountPath: {{ .Values.conf.cinder.oslo_concurrency.lock_path }}
      containers:
        - name: cinder-volume
{{ tuple $envAll "cinder_volume" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.volume | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "cinder_volume" "container" "cinder_volume" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          command:
            - /tmp/cinder-volume.sh
{{ dict "envAll" $envAll "component" "volume" "container" "default" "type" "readiness" "probeTemplate" (include "volumeProbeTemplate" "readiness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
{{ dict "envAll" $envAll "component" "volume" "container" "default" "type" "liveness" "probeTemplate" (include "volumeProbeTemplate" "liveness" | fromYaml) | include "helm-toolkit.snippets.kubernetes_probe" | indent 10 }}
          terminationMessagePath: /var/log/termination-log
          env:
            - name: CINDER_INTERNAL_TENANT_PROJECT_ID
              valueFrom:
                configMapKeyRef:
                  name: cinder-internal-tenant-ids
                  key: CINDER_INTERNAL_TENANT_PROJECT_ID
            - name: CINDER_INTERNAL_TENANT_USER_ID
              valueFrom:
                configMapKeyRef:
                  name: cinder-internal-tenant-ids
                  key: CINDER_INTERNAL_TENANT_USER_ID
          volumeMounts:
{{ dict "envAll" $envAll "objectType" "mountpoint" "secretPrefix" "cinder" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 12 }}
            - name: pod-tmp
              mountPath: /tmp
            - name: cinder-bin
              mountPath: /tmp/cinder-volume.sh
              subPath: cinder-volume.sh
              readOnly: true
            - name: pod-shared
              mountPath: /tmp/pod-shared
            - name: cinder-conversion
              mountPath: /var/lib/cinder/conversion
            - name: cinder-etc
              mountPath: /etc/cinder/cinder.conf
              subPath: cinder.conf
              readOnly: true
            - name: lockpath
              mountPath: {{ .Values.conf.cinder.oslo_concurrency.lock_path }}
            {{- if .Values.conf.cinder.DEFAULT.log_config_append }}
            - name: cinder-etc
              mountPath: {{ .Values.conf.cinder.DEFAULT.log_config_append }}
              subPath: {{ base .Values.conf.cinder.DEFAULT.log_config_append }}
              readOnly: true
            {{- end }}
            - name: cinder-etc
              mountPath: /etc/cinder/conf/backends.conf
              subPath: {{ $backendConfName }}
              readOnly: true
            {{- if or .Values.manifests.ceph_conf ( eq "true" ( list $envBackend | include "cinder.utils.has_ceph_backend")) }}
            - name: ceph-etc
              mountPath: /etc/ceph/ceph.conf
              subPath: ceph.conf
              readOnly: true
            {{ dict "envAll" $envAll "objectType" "mountpoint" "application" "cinder" | include "helm-toolkit.snippets.kubernetes_ceph_keyring_objects" | indent 12 }}
            {{- end }}
            - name: cinder-etc
              # NOTE (Portdirect): We mount here to override Kollas
              # custom sudoers file when using Kolla images, this
              # location will also work fine for other images.
              mountPath: /etc/sudoers.d/kolla_cinder_sudoers
              subPath: cinder_sudoers
              readOnly: true
            - name: cinder-etc
              mountPath: /etc/sudoers.d/kolla_cinder_volume_sudoers
              subPath: cinder_sudoers
              readOnly: true
            - name: cinder-etc
              mountPath: /etc/cinder/rootwrap.conf
              subPath: rootwrap.conf
              readOnly: true
            {{- range $key, $value := $envAll.Values.conf.rootwrap_filters }}
            {{- if ( has "volume" $value.pods ) }}
            {{- $filePrefix := replace "_" "-"  $key }}
            {{- $rootwrapFile := printf "/etc/cinder/rootwrap.d/%s.filters" $filePrefix }}
            - name: cinder-etc
              mountPath: {{ $rootwrapFile }}
              subPath: {{ base $rootwrapFile }}
              readOnly: true
            {{- end }}
            {{- end }}
            - name: cinder-bin
              mountPath: /tmp/health-probe.py
              subPath: health-probe.py
              readOnly: true
            {{- if .Values.conf.enable_iscsi }}
            - name: host-rootfs
              mountPath: /mnt/host-rootfs
            - name: runlock
              mountPath: /run/lock
            - name: etciscsi
              mountPath: /etc/iscsi
              readOnly: false
            - name: etcmultipath
              mountPath: /etc/multipath
              readOnly: false
            - name: usrlocalsbin
              mountPath: /usr/local/sbin
            - name: cinder-bin
              mountPath: /usr/local/sbin/iscsiadm
              subPath: iscsiadm
            - name: dev
              mountPath: /dev
              mountPropagation: HostToContainer
            {{- end }}
            - name: varlibcinder
              mountPath: {{ .Values.conf.cinder.DEFAULT.state_path | default "/var/lib/cinder" }}
{{- dict "enabled" $envAll.Values.manifests.certificates "name" $envAll.Values.endpoints.oslo_db.auth.admin.secret.tls.internal "path" "/etc/mysql/certs" | include "helm-toolkit.snippets.tls_volume_mount" | indent 12 }}
{{ if $mounts_cinder_volume.volumeMounts }}{{ toYaml $mounts_cinder_volume.volumeMounts | indent 12 }}{{ end }}
      volumes:
{{ dict "envAll" $envAll "objectType" "volume" "secretPrefix" "cinder" | include "helm-toolkit.snippets.kubernetes_ssl_objects" | indent 8 }}
        - name: pod-tmp
          emptyDir: {}
        - name: cinder-bin
          configMap:
            name: cinder-bin
            defaultMode: 504
        - name: cinder-etc
          secret:
            secretName: cinder-etc
            defaultMode: 416
        - name: pod-shared
          emptyDir: {}
        - name: cinder-conversion
          emptyDir: {}
        - name: cinder-internal-tenant-ids
          configMap:
            name: cinder-internal-tenant-ids
            defaultMode: 416
        {{- if or .Values.manifests.ceph_conf ( eq "true" ( list $envBackend | include "cinder.utils.has_ceph_backend")) }}
        - name: ceph-etc
        {{- if .Values.manifests.ceph_conf }}
          secret:
            secretName: cinder-etc
        {{- else }}
          configMap:
            name: {{ .Values.ceph_client.configmap }}
        {{- end }}
            defaultMode: 416
        {{ end }}
        {{- if .Values.conf.enable_iscsi }}
        - name: host-rootfs
          hostPath:
            path: /
        - name: runlock
          hostPath:
            path: /run/lock
        - name: etciscsi
          hostPath:
            path: /etc/iscsi
        - name: etcmultipath
          hostPath:
            path: /etc/multipath
            type: DirectoryOrCreate
        - name: usrlocalsbin
          emptyDir: {}
        - name: dev
          hostPath:
            path: /dev
        {{- end }}
        - name: varlibcinder
          hostPath:
            path: {{ .Values.conf.cinder.DEFAULT.state_path | default "/var/lib/cinder" }}
        - name: lockpath
          hostPath:
            path: {{ .Values.conf.cinder.oslo_concurrency.lock_path }}
{{- dict "enabled" $envAll.Values.manifests.certificates "name" $envAll.Values.endpoints.oslo_db.auth.admin.secret.tls.internal | include "helm-toolkit.snippets.tls_volume" | indent 8 }}
{{- dict "enabled" .Values.manifests.certificates "name" .Values.secrets.tls.volumev3.api.internal | include "helm-toolkit.snippets.tls_volume" | indent 8 }}
{{ if $mounts_cinder_volume.volumes }}{{ toYaml $mounts_cinder_volume.volumes | indent 8 }}{{ end }}
{{- end }}
{{- end }}

{{- $envAll := . }}
{{- $statefulset := "cinder-volume" }}
{{- $backendConfName := "backends.conf" }}
{{- $serviceAccountName := "cinder-volume" }}
{{- $envBackend := .Values.conf.backends }}

{{- if .Values.manifests.statefulset_volume }}
{{- tuple $envAll "volume" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
{{- list $statefulset $backendConfName $serviceAccountName $envAll $envBackend | include "cinder.volume.statefulset" }}
{{- end }}

{{- if hasKey (index .Values "overrides" | default dict) "cinder_volume_sts" }}
  {{- $serviceAccountName = "cinder-volume-sts" }}
  {{- tuple $envAll "volume" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
  {{- list "volume" "cinder.volume.statefulset" $serviceAccountName "cinder.configmap.etc" "cinder-etc" "cinder.configmap.bin" "cinder-bin" $envAll | include "helm-toolkit.utils.statefulset_overrides_root" }}
{{- else if hasKey (index .Values.conf "standalone_backends" | default dict) "statefulsets" }}
  {{- range $name, $standalone_backend := .Values.conf.standalone_backends.statefulsets }}
    {{- $statefulset = printf "cinder-volume-%s" $name }}
    {{- $backendConfName = printf "backend_%s_sts.conf" $name }}
    {{- $serviceAccountName = printf "cinder-volume-%s" $name }}
    {{- $envBackend = index $standalone_backend.conf $name }}
    {{- tuple $envAll "volume" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
    {{- list $statefulset $backendConfName $serviceAccountName $envAll $envBackend | include "cinder.volume.statefulset" }}
  {{- end }}
{{- end }}
