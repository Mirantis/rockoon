#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'tempest' %}
{%- set signature = spec.get('features', {}).get('glance', {}).get("signature", {"enabled": false}) %}

spec:
  releases:
  - name: openstack-tempest
    chart: tempest
    values:
      images:
        tags:
{%- for image in [
    "tempest_run_tests",
    "ks_user",
    "dep_check",
    "image_repo_sync",
    "bootstrap",
    "tempest_static_accounts",
    "tempest-uuids-init",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      manifests:
        network_policy: false
        secret_ca_bundle: true
{%- if signature.enabled %}
        job_static_accounts: true
{%- endif %}
      pod:
        replicas:
          server: 1
      pvc:
{%- if is_ceph_enabled %}
        storage_class: {{ spec.get('persistent_volume_storage_class', 'default') }}
{%- else %}
        storage_class: {{ spec.get('local_volume_storage_class', 'openstack-operator-bind-mounts') }}
{%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
          host_fqdn_override:
            public:
              host: keystone.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
{%- if rgw_internal_cacert is defined %}
{{ rgw_internal_cacert | indent( width=18, first=True) }}
{%- endif %}
{%- if proxy_settings is defined %}
{%- if proxy_settings.get("proxy_ca_certificate") %}
{{ proxy_settings["proxy_ca_certificate"] | indent( width=18, first=True) }}
{%- endif %}
{%- endif %}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: keystone-api
            default: keystone
            internal: keystone-api
            public:
              host: keystone
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
{%- if rgw_internal_cacert is defined %}
{{ rgw_internal_cacert | indent( width=18, first=True) }}
{%- endif %}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 5000
              default: 80
              internal: 5000
              public: 443
          scheme:
            default: http
            public: https
        dashboard:
          host_fqdn_override:
            default: horizon.{{ spec.public_domain_name }}
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            default: horizon-int
            public:
              host: horizon
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            web:
              default: 80
              public: 443
          scheme:
            default: http
            public: https
      bootstrap:
        enabled: true
        script: |
          {%- if spec.features.neutron.get('floating_network', {}).get('enabled', true) %}
          public_network_name={{ spec.features.neutron.get('floating_network', {}).get('name', 'public') }}
          {%- else %}
          {%-   if spec.services.get('tempest', {}).get('tempest', {}).get('values', {}).get('conf', {}).get('convert_to_uuid', {}).get('network', {}).get('public_network_id') %}
          public_network_name={{ spec.services.get('tempest', {}).get('tempest', {}).get('values', {}).get('conf', {}).get('convert_to_uuid', {}).get('network', {}).get('public_network_id') }}
          {%-   else %}
          public_network_name=$(openstack network list --external  --no-share -f value -c Name | head -1)
          {%-   endif%}
          {%- endif %}
          if [[ -z "${public_network_name}" ]]; then
              echo "Failed to detect public_network name."
              exit 1
          fi
          openstack network show heat-net || openstack network create heat-net
          openstack subnet show heat-subnet || openstack subnet create heat-subnet \
            --dhcp --subnet-range 10.20.30.0/24 \
            --allocation-pool start=10.20.30.10,end=10.20.30.254 \
            --gateway 10.20.30.1 \
            --network heat-net
          openstack router show heat-router || openstack router create heat-router
          subnet_id=$(openstack subnet show heat-subnet -f value -c id)
          if openstack router show heat-router -f json -c interfaces_info |grep -qw ${subnet_id}; then
            echo "$subnet_id is in the list"
          else
            openstack router add subnet heat-router heat-subnet
            openstack router set --external-gateway ${public_network_name} heat-router
          fi
{%- if spec.features.neutron.get('backend') != 'tungstenfabric' %}
          openstack subnet pool show default_pool || \
            openstack subnet pool create --share --default \
            --pool-prefix 10.20.40.0/24 --default-prefix-length 26 \
            default_pool
{%- else %}
          openstack network show tempest-fixed-net || openstack network create tempest-fixed-net --share
          openstack subnet show tempest-subnet || openstack subnet create tempest-subnet \
            --dhcp --subnet-range 10.20.40.0/24 \
            --allocation-pool start=10.20.40.10,end=10.20.40.254 \
            --gateway 10.20.40.1 \
            --network tempest-fixed-net
{%- endif %}
{%- if OSVer.yoga <= OSVer[spec.openstack_version] %}
{%- raw %}
          {{- if .Values.conf.tempest.service_available.designate }}
          {{-   if not .Values.conf.tempest.DEFAULT.production }}
          function ensure_tld_present {
            openstack tld show $i || openstack tld create --name $i --description tempest-tests
          }
          for i in {{ .Values.conf.tempest.dns.tld_suffix }} "arpa" "in-addr.arpa"; do
            ensure_tld_present $i
          done
          {{-   end }}
          {{- end }}
{%- endraw %}
{%- endif %}
      conf:
        static_accounts:
          project_count: 25
          project_count_with_network: 10
          project_count_without_network: 15
          {%- if OSVer.yoga <= OSVer[spec.openstack_version] %}
          create_reader_user: true
          {%- endif %}
          user_count: 3
        convert_to_uuid:
{%- if spec.features.neutron.get('floating_network', {}).get('enabled', true) %}
          network:
            public_network_id: {{ spec.features.neutron.get('floating_network', {}).get('name', 'public') }}
{%- endif %}
          identity:
# turn on option for versions starting from yoga besides master
{%- if OSVer.yoga <= OSVer[spec.openstack_version] < OSVer.master %}
            default_domain_id: tempest
{%- else %}
            default_domain_id: Default
{%- endif %}
        tempest: {{ spec | generate_tempest_config(helmbundles_body) }}
