#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- set service = 'aodh' %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}
{%- set external_notifications_enabled = spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('enabled', False) %}
{%- if external_notifications_enabled %}
  {%- for topic in spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('topics', []) %}
    {%- do notification_topics.append(topic) %}
  {%- endfor %}
{%- endif  %}
{%- set aodh_db_cleanup = spec.get('features', {}).get('database', {}).get('cleanup', {}).get('aodh', {'enabled': true}) %}
{%- from 'macros/etcd3.j2' import get_etcd3_endpoint %}

spec:
  releases:
{%- if spec.get('migration', {}).get('telemetry', {}).get('deploy_main_service', True) %}
  - name: openstack-aodh
    chart: aodh
    values:
      images:
        tags:
{%- for image in [
    "bootstrap",
    "db_init",
    "db_drop",
    "rabbit_init",
    "aodh_db_sync",
    "aodh_db_purge",
    "ks_user",
    "ks_service",
    "ks_endpoints",
    "aodh_api",
    "aodh_evaluator",
    "aodh_listener",
    "aodh_notifier",
    "dep_check",
    "image_repo_sync",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      conf:
        aodh:
          api:
            gnocchi_external_project_owner: service
            gnocchi_external_domain_name: service
          coordination:
{%- if OSVer.antelope <= OSVer[spec.openstack_version] < OSVer.master %}
            backend_url: {{ get_etcd3_endpoint(spec.openstack_version, 'etcd3gw') }}
{%- else %}
            #There are some problems with etcd3+http driver so we shouldn't use it
            #BUG: https://mirantis.jira.com/browse/PRODX-21784
            backend_url: {{ get_etcd3_endpoint(spec.openstack_version, 'etcd3') }}
{%- endif %}
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials[0].memcached }}
            {%- if OSVer[spec.openstack_version] >= OSVer.train %}
            service_type: alarming
            {%- endif %}
          database:
            alarm_history_time_to_live: {{ aodh_db_cleanup.get('age', 1) * 86400 }}
{% include 'base/_oslo_policy_enforce_defaults.yaml' %}
        logging:
          logger_aodh:
            level: {{ spec.get('features', {}).get('logging', {}).get('aodh', {}).get('level', 'INFO') }}
        policy.d:
          01-controller-default.yaml: {{ service_policy }}
          02-custom.yaml: {{ spec.get("features", {}).get("policies", {}).get("aodh", {}) }}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
{%- if spec.features.network_policies.enabled %}
      network_policy:
{% include 'base/network_policies/alarming.yaml' %}
{%- endif %}
      manifests:
        network_policy: {{ spec.features.network_policies.enabled }}
        cron_job_db_purge: true
        job_rabbit_init: false
        secret_ca_bundle: true
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            aodh:
              username: {{ credentials[0].database.user.username }}
              password: {{ credentials[0].database.user.password }}
{% include 'base/_messaging_shared.yaml' %}
{% include 'base/_notifications.yaml' %}
        alarming:
          host_fqdn_override:
            public:
              host: aodh.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
{%- if proxy_settings is defined %}
{%- if proxy_settings.get("proxy_ca_certificate") %}
{{ proxy_settings["proxy_ca_certificate"] | indent( width=18, first=True) }}
{%- endif %}
{%- endif %}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: aodh-api
            default: aodh
            internal: aodh-api
            public:
              host: aodh
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 8042
              default: 80
              internal: 8042
              public: 443
          scheme:
            default: http
            public: https
      jobs:
{% include 'base/_ks_jobs.yaml' %}
        db_purge:
          enabled: {{ aodh_db_cleanup.enabled }}
          cron: {{ aodh_db_cleanup.get('schedule', '1 6 * * 1') }}
  {%- if OSVer[spec.openstack_version] < OSVer.yoga %}
      pod:
        probes:
          evaluator:
            evaluator:
              readiness:
                enabled: false
              liveness:
                enabled: false
          listener:
            listener:
              readiness:
                enabled: false
              liveness:
                enabled: false
          notifier:
            notifier:
              readiness:
                enabled: false
              liveness:
                enabled: false
  {%- endif %}
{%- endif %}
