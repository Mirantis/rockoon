#apiVersion: lcm.mirantis.com/v1alpha1
#kind: HelmBundle

{%- from 'macros/messaging_service_creds.j2' import messaging_service_creds %}
{%- from 'macros/etcd3.j2' import get_etcd3_endpoint %}
{%- set service = 'designate' %}
{%- set stacklight_enabled = spec.get('features', {}).get('stacklight', {}).get('enabled', False) %}
{%- set notification_topics = ['notifications'] %}
{%- do notification_topics.append('stacklight_notifications') if stacklight_enabled %}
{%- set external_notifications_enabled = spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('enabled', False) %}
{%- if external_notifications_enabled %}
  {%- for topic in spec.get('features', {}).get('messaging', {}).get('notifications', {}).get('external', {}).get('topics', []) %}
    {%- do notification_topics.append(topic) %}
  {%- endfor %}
{%- endif  %}
{%- set designate_log_level = spec.get('features', {}).get('logging', {}).get('designate', {}).get('level', 'INFO') %}
{%- set designate_backend = spec.get('features', {}).get('designate', {}).get('backend', {}).get('type', 'powerdns') %}
{%- if designate_backend == 'powerdns' %}
  {%- set powerdns_protocol = spec.get('features', {}).get('designate', {}).get('backend', {}).get('protocol', 'udp') %}
  {%- set powerdns_external_ip = spec.get('features', {}).get('designate', {}).get('backend', {}).get('external_ip') %}
{%- endif %}
{%- set cadf_audit = spec.get('features', {}).get('logging', {}).get('cadf', {'enabled': false}) %}
{%- set cadf_audit_driver = spec.get('features', {}).get('logging', {}).get('cadf', {}).get('driver', 'messagingv2') %}

{%- set test_zone_name = "test-zone.test." %}


spec:
  releases:
{%- if spec.get('migration', {}).get('designate', {}).get('deploy_main_service', True) %}
  - name: openstack-designate
    chart: designate
    values:
      images:
        tags:
{%- for image in [
    "ks_service",
    "db_drop",
    "designate_sink",
    "designate_producer",
    "bootstrap",
    "designate_mdns",
    "ks_endpoints",
    "designate_api",
    "db_init",
    "dep_check",
    "designate_db_sync",
    "ks_user",
    "rabbit_init",
    "designate_worker",
    "designate_central",
    "powerdns",
    "designate_pool_manage",
    "designate_pool_manage_hash",
    "designate_zone_setup",
    "powerdns_db_sync",] %}
        {%- if image in images %}
          {{ image }}: {{ images[image] }}
        {%- endif %}
{%- endfor %}
      dependencies:
        static:
          db_init:
            jobs:
              - openstack-mariadb-cluster-wait
      conf:
        zones: |
          {{ test_zone_name }}:
            email: test@test.test
            recordsets:
              - name: test-record.{{ test_zone_name }}
                type: A
                records:
                  - 1.2.3.4
        policy.d:
          01-controller-default.yaml: {{ service_policy }}
          02-custom.yaml: {{ spec.get("features", {}).get("policies", {}).get("designate", {}) }}
        designate:
          keystone_authtoken:
            memcache_security_strategy: ENCRYPT
            memcache_secret_key: {{ credentials[0].memcached }}
            {%- if OSVer[spec.openstack_version] >= OSVer.train %}
            service_type: dns
            {%- endif %}
          service:api:
            enabled_extensions_admin: quotas
{%- if cadf_audit.enabled %}
          audit_middleware_notifications:
            driver: {{ cadf_audit_driver }}
{%- else %}
          audit_middleware_notifications:
            driver: noop
{%- endif %}
          oslo_messaging_notifications:
            topics: {{ notification_topics|join(',') }}
{% include 'base/_oslo_policy_enforce_defaults.yaml' %}
      {%- if OSVer[spec.openstack_version] >= OSVer.victoria %}
          coordination:
            backend_url: {{ get_etcd3_endpoint(spec.openstack_version, 'etcd3gw') }}
      {%- endif %}
        logging:
          logger_designate:
            level: {{ designate_log_level }}
      {%- if OSVer[spec.openstack_version] >= OSVer.victoria %}
        software:
          apache2:
            enabled: true
      {%- endif %}
        powerdns:
          # zone-cache-refresh-interval param must be less then poller total timeout
          # it can be calcalated as poll_delay + poll_retry_interval * poll_max_retries
          # by default it is 155 seconds. More information in the bug PRODX-30888
          zone-cache-refresh-interval: 120
      {%- if designate_log_level == 'DEBUG' %}
          loglevel: 5
          webserver-loglevel: 'detailed'
      {%- endif %}
          # Do not disable cache, limits performance significantly PRODX-42390
          cache_ttl: 20
          negquery_cache_ttl: 60
          query_cache_ttl: 20
          receiver-threads: 2
{%- if spec.features.network_policies.enabled %}
      network_policy:
{% include 'base/network_policies/dns.yaml' %}
{%- endif %}
      manifests:
        network_policy: {{ spec.features.network_policies.enabled }}
        job_rabbit_init: false
      {%- if powerdns_protocol == 'udp' or powerdns_protocol == 'tcp+udp' %}
        service_powerdns_external: true
      {%- endif %}
      {%- if powerdns_protocol == 'tcp' or powerdns_protocol == 'tcp+udp' %}
        service_powerdns_external_tcp: true
      {%- endif %}
        secret_powerdns_db: true
        service_powerdns_api: true
        designate_powerdns: true
        configmap_powerdns_bin: true
        configmap_powerdns_etc: true
        job_powerdns_db_sync: true
        job_powerdns_db_init: true
        secret_ca_bundle: true
        job_zone_setup: true
      network:
        mdns:
          node_port:
            enabled: false
      {%- if powerdns_external_ip %}
        powerdns:
          external:
            service:
              loadBalancerIP: {{ powerdns_external_ip }}
      {%- endif %}
      endpoints:
        cluster_domain_suffix: {{ spec.internal_domain_name }}
{% include 'base/_admin_identity.yaml' %}
{% include 'base/_cache.yaml' %}
        oslo_db:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            designate:
              username: {{ credentials[0].database.user.username }}
              password: {{ credentials[0].database.user.password }}
        oslo_db_powerdns:
          auth:
            admin:
              username: {{ admin_creds.database.username }}
              password: {{ admin_creds.database.password }}
            powerdns:
              username: {{ powerdns.database.username }}
              password: {{ powerdns.database.password }}
{% include 'base/_messaging_shared.yaml' %}
{% include 'base/_notifications.yaml' %}
        powerdns:
          auth:
            service:
              token: {{ powerdns.api_key }}
        dns:
          host_fqdn_override:
            public:
              host: designate.{{ spec.public_domain_name }}
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
{%- if proxy_settings is defined %}
{%- if proxy_settings.get("proxy_ca_certificate") %}
{{ proxy_settings["proxy_ca_certificate"] | indent( width=18, first=True) }}
{%- endif %}
{%- endif %}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: designate-api
            default: designate
            internal: designate-api
            public:
              host: designate
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            api:
              admin: 9001
              default: 80
              internal: 9001
              public: 443
          scheme:
            default: http
            public: https
        mdns:
          host_fqdn_override:
            public:
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          hosts:
            admin:
              host: designate-mdns
            default: minidns
            public:
              host: minidns
              tls:
                ca: |
{{ spec.features.ssl.public_endpoints.ca_cert | indent( width=18, first=True) }}
                crt: |
{{ spec.features.ssl.public_endpoints.api_cert | indent( width=18, first=True) }}
                key: |
{{ spec.features.ssl.public_endpoints.api_key | indent( width=18, first=True) }}
          port:
            ipc:
              admin: 5354
              default: 80
              internal: 5354
              public: 443
          scheme:
            default: http
            public: https
      jobs:
{% include 'base/_ks_jobs.yaml' %}
{%- endif %}
